package bstreelinklistinterfgeneric;

import bstreeInterface.BinarySearchTree;
import exceptions.*;

class Node<E> {
    E data;
    Node<E> left, right;

    Node(E data) {
        this.data = data;
        this.left = this.right = null;
    }
}

public class LinkedBST<E extends Comparable<E>> implements BinarySearchTree<E> {
    private Node<E> root;

    public LinkedBST() {
        this.root = null;
    }
 @Override
    public void insert(E data) throws ItemDuplicatedException {
        root = insertRec(root, data);
    }

    private Node<E> insertRec(Node<E> node, E data) throws ItemDuplicatedException {
        if (node == null) return new Node<>(data);
        int cmp = data.compareTo(node.data);
        if (cmp == 0) throw new ItemDuplicatedException("Dato duplicado: " + data);
        else if (cmp < 0) node.left = insertRec(node.left, data);
        else node.right = insertRec(node.right, data);
        return node;
    }
 @Override
    public boolean search(E data) throws ExceptionIsEmpty {
        if (root == null) throw new ExceptionIsEmpty("Árbol vacío");
        return searchRec(root, data);
    }

    private boolean searchRec(Node<E> node, E data) {
        if (node == null) return false;
        int cmp = data.compareTo(node.data);
        if (cmp == 0) return true;
        else if (cmp < 0) return searchRec(node.left, data);
        else return searchRec(node.right, data);
    }
 @Override
    public void delete(E data) throws ExceptionIsEmpty, ItemNotFoundException {
        if (root == null) throw new ExceptionIsEmpty("Árbol vacío");
        root = deleteRec(root, data);
    }

    private Node<E> deleteRec(Node<E> node, E data) throws ItemNotFoundException {
        if (node == null) throw new ItemNotFoundException("Dato no encontrado: " + data);
        int cmp = data.compareTo(node.data);
        if (cmp < 0) node.left = deleteRec(node.left, data);
        else if (cmp > 0) node.right = deleteRec(node.right, data);
        else {
            if (node.left == null) return node.right;
            if (node.right == null) return node.left;
            Node<E> min = findMinNode(node.right);
            node.data = min.data;
            node.right = deleteRec(node.right, min.data);
        }
        return node;
    }

private void inOrder(Node<E> node, StringBuilder sb) {
        if (node != null) {
            inOrder(node.left, sb);
            sb.append(node.data).append(" ");
            inOrder(node.right, sb);
        }
    }
public void preOrder(Node<E> node, StringBuilder sb) {
    if (node != null) {
        sb.append(node.data).append(" ");
        preOrder(node.left, sb);
        preOrder(node.right, sb);        }
    }
public void postOrder(Node<E> node, StringBuilder sb) {
        if (node != null) {
            postOrder(node.left, sb);
            postOrder(node.right, sb);
            sb.append(node.data).append(" ");
        }
    }

private Node<E> findMinNode(Node<E> node) {
       while (node.left != null) node = node.left;
      return node;
    }
  
    private Node<E> findMaxNode(Node<E> node) {
      while (node.right != null) node = node.right;
        return node;
    }
  
  @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        inOrder(root, sb);
        return sb.toString().trim();
      }

 @Override
    public void destroyNodes() throws ExceptionIsEmpty {
        if (root == null) throw new ExceptionIsEmpty("Árbol vacío");
        root = null;
    }

    @Override
    public int countAllNodes() {
        return countAllNodes(root);
    }

    private int countAllNodes(Node<E> node) {
        if (node == null || (node.left == null && node.right == null)) return 0;
        return 1 + countAllNodes(node.left) + countAllNodes(node.right);
    }

    @Override
    public int countLeaves() {
        return countLeaves(root);
    }

    private int countLeaves(Node<E> node) {
        if (node == null) return 0;
        if (node.left == null && node.right == null) return 1;
        return countLeaves(node.left) + countLeaves(node.right);
    }

    @Override
    public int height(E data) {
        Node<E> node = root;
        while (node != null) {
            int cmp = data.compareTo(node.data);
            if (cmp == 0) return heightFrom(node);
            else if (cmp < 0) node = node.left;
            else node = node.right;
        }
        return -1;
    }

    private int heightFrom(Node<E> node) {
        if (node == null) return -1;
        return 1 + Math.max(heightFrom(node.left), heightFrom(node.right));
    }

    @Override
    public int amplitude(int level) {
        return countNodesAtLevel(root, level);
    }

    private int countNodesAtLevel(Node<E> node, int level) {
        if (node == null) return 0;
        if (level == 0) return 1;
        return countNodesAtLevel(node.left, level - 1) + countNodesAtLevel(node.right, level - 1);
    }

 @Override
    public int areaBST() {
        return countLeaves() * heightFrom(root);
    }

    @Override
    public void drawBST() {
        System.out.println("\nÁrbol BST:");
        System.out.println(parenthesize());
    }

  @Override
    public String parenthesize() {
        return parenthesize(root, 0);
    }

    private String parenthesize(Node<E> node, int level) {
        if (node == null) return "";
        String indent = "  ".repeat(level);
        return indent + node.data + "\n" + parenthesize(node.left, level + 1) + parenthesize(node.right, level + 1);
    }

