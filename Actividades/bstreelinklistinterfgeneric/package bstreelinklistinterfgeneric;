package bstreelinklistinterfgeneric;

import bstreeInterface.BinarySearchTree;
import exceptions.*;

class Node<E> {
    E data;
    Node<E> left, right;

    Node(E data) {
        this.data = data;
        this.left = this.right = null;
    }
}

public class LinkedBST<E extends Comparable<E>> implements BinarySearchTree<E> {
    private Node<E> root;

    public LinkedBST() {
        this.root = null;
    }
 @Override
    public void insert(E data) throws ItemDuplicatedException {
        root = insertRec(root, data);
    }

    private Node<E> insertRec(Node<E> node, E data) throws ItemDuplicatedException {
        if (node == null) return new Node<>(data);
        int cmp = data.compareTo(node.data);
        if (cmp == 0) throw new ItemDuplicatedException("Dato duplicado: " + data);
        else if (cmp < 0) node.left = insertRec(node.left, data);
        else node.right = insertRec(node.right, data);
        return node;
    }
 @Override
    public boolean search(E data) throws ExceptionIsEmpty {
        if (root == null) throw new ExceptionIsEmpty("Árbol vacío");
        return searchRec(root, data);
    }

    private boolean searchRec(Node<E> node, E data) {
        if (node == null) return false;
        int cmp = data.compareTo(node.data);
        if (cmp == 0) return true;
        else if (cmp < 0) return searchRec(node.left, data);
        else return searchRec(node.right, data);
    }
